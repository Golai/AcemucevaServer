package persistence;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * RegistroE Value Object.
  * This class is value object representing database table acemuceva
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class RegistroE implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int id_registro;
    private int id_evento;
    private int id_miembro;
    private int id_asistente;
    private String fecha_registro;
    private String asistencia;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public RegistroE () {

    }

    public RegistroE (int id_registroIn) {

          this.id_registro = id_registroIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getId_registro() {
          return this.id_registro;
    }
    public void setId_registro(int id_registroIn) {
          this.id_registro = id_registroIn;
    }

    public int getId_evento() {
          return this.id_evento;
    }
    public void setId_evento(int id_eventoIn) {
          this.id_evento = id_eventoIn;
    }

    public int getId_miembro() {
          return this.id_miembro;
    }
    public void setId_miembro(int id_miembroIn) {
          this.id_miembro = id_miembroIn;
    }

    public int getId_asistente() {
          return this.id_asistente;
    }
    public void setId_asistente(int id_asistenteIn) {
          this.id_asistente = id_asistenteIn;
    }

    public String getFecha_registro() {
          return this.fecha_registro;
    }
    public void setFecha_registro(String fecha_registroIn) {
          this.fecha_registro = fecha_registroIn;
    }

    public String getAsistencia() {
          return this.asistencia;
    }
    public void setAsistencia(String asistenciaIn) {
          this.asistencia = asistenciaIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int id_registroIn,
          int id_eventoIn,
          int id_miembroIn,
          int id_asistenteIn,
          String fecha_registroIn,
          String asistenciaIn) {
          this.id_registro = id_registroIn;
          this.id_evento = id_eventoIn;
          this.id_miembro = id_miembroIn;
          this.id_asistente = id_asistenteIn;
          this.fecha_registro = fecha_registroIn;
          this.asistencia = asistenciaIn;
    }


    /** 
     * hasEqualMapping-method will compare two RegistroE instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(RegistroE valueObject) {

          if (valueObject.getId_registro() != this.id_registro) {
                    return(false);
          }
          if (valueObject.getId_evento() != this.id_evento) {
                    return(false);
          }
          if (valueObject.getId_miembro() != this.id_miembro) {
                    return(false);
          }
          if (valueObject.getId_asistente() != this.id_asistente) {
                    return(false);
          }
          if (this.fecha_registro == null) {
                    if (valueObject.getFecha_registro() != null)
                           return(false);
          } else if (!this.fecha_registro.equals(valueObject.getFecha_registro())) {
                    return(false);
          }
          if (this.asistencia == null) {
                    if (valueObject.getAsistencia() != null)
                           return(false);
          } else if (!this.asistencia.equals(valueObject.getAsistencia())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass RegistroE, mapping to table acemuceva\n");
        out.append("Persistent attributes: \n"); 
        out.append("id_registro = " + this.id_registro + "\n"); 
        out.append("id_evento = " + this.id_evento + "\n"); 
        out.append("id_miembro = " + this.id_miembro + "\n"); 
        out.append("id_asistente = " + this.id_asistente + "\n"); 
        out.append("fecha_registro = " + this.fecha_registro + "\n"); 
        out.append("asistencia = " + this.asistencia + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        RegistroE cloned = new RegistroE();

        cloned.setId_registro(this.id_registro); 
        cloned.setId_evento(this.id_evento); 
        cloned.setId_miembro(this.id_miembro); 
        cloned.setId_asistente(this.id_asistente); 
        if (this.fecha_registro != null)
             cloned.setFecha_registro(new String(this.fecha_registro)); 
        if (this.asistencia != null)
             cloned.setAsistencia(new String(this.asistencia)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}
